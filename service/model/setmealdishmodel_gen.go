// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	setmealDishFieldNames          = builder.RawFieldNames(&SetmealDish{})
	setmealDishRows                = strings.Join(setmealDishFieldNames, ",")
	setmealDishRowsExpectAutoSet   = strings.Join(stringx.Remove(setmealDishFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	setmealDishRowsWithPlaceHolder = strings.Join(stringx.Remove(setmealDishFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSetmealDishIdPrefix = "cache:setmealDish:id:"
)

type (
	setmealDishModel interface {
		Insert(ctx context.Context, data *SetmealDish) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SetmealDish, error)
		Update(ctx context.Context, data *SetmealDish) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSetmealDishModel struct {
		sqlc.CachedConn
		table string
	}

	SetmealDish struct {
		Id        int64           `db:"id"`         // 主键
		SetmealId sql.NullInt64   `db:"setmeal_id"` // 套餐id
		DishId    sql.NullInt64   `db:"dish_id"`    // 菜品id
		Name      sql.NullString  `db:"name"`       // 菜品名称 （冗余字段）
		Price     sql.NullFloat64 `db:"price"`      // 菜品单价（冗余字段）
		Copies    sql.NullInt64   `db:"copies"`     // 菜品份数
	}
)

func newSetmealDishModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSetmealDishModel {
	return &defaultSetmealDishModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`setmeal_dish`",
	}
}

func (m *defaultSetmealDishModel) Delete(ctx context.Context, id int64) error {
	setmealDishIdKey := fmt.Sprintf("%s%v", cacheSetmealDishIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, setmealDishIdKey)
	return err
}

func (m *defaultSetmealDishModel) FindOne(ctx context.Context, id int64) (*SetmealDish, error) {
	setmealDishIdKey := fmt.Sprintf("%s%v", cacheSetmealDishIdPrefix, id)
	var resp SetmealDish
	err := m.QueryRowCtx(ctx, &resp, setmealDishIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", setmealDishRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSetmealDishModel) Insert(ctx context.Context, data *SetmealDish) (sql.Result, error) {
	setmealDishIdKey := fmt.Sprintf("%s%v", cacheSetmealDishIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, setmealDishRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SetmealId, data.DishId, data.Name, data.Price, data.Copies)
	}, setmealDishIdKey)
	return ret, err
}

func (m *defaultSetmealDishModel) Update(ctx context.Context, data *SetmealDish) error {
	setmealDishIdKey := fmt.Sprintf("%s%v", cacheSetmealDishIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, setmealDishRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SetmealId, data.DishId, data.Name, data.Price, data.Copies, data.Id)
	}, setmealDishIdKey)
	return err
}

func (m *defaultSetmealDishModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSetmealDishIdPrefix, primary)
}

func (m *defaultSetmealDishModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", setmealDishRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSetmealDishModel) tableName() string {
	return m.table
}
