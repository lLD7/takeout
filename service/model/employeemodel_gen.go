// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	employeeFieldNames          = builder.RawFieldNames(&Employee{})
	employeeRows                = strings.Join(employeeFieldNames, ",")
	employeeRowsExpectAutoSet   = strings.Join(stringx.Remove(employeeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	employeeRowsWithPlaceHolder = strings.Join(stringx.Remove(employeeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheEmployeeIdPrefix       = "cache:employee:id:"
	cacheEmployeeUsernamePrefix = "cache:employee:username:"
)

type (
	employeeModel interface {
		Insert(ctx context.Context, data *Employee) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Employee, error)
		FindOneByUsername(ctx context.Context, username string) (*Employee, error)
		Update(ctx context.Context, data *Employee) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEmployeeModel struct {
		sqlc.CachedConn
		table string
	}

	Employee struct {
		Id         int64         `db:"id"`          // 主键
		Name       string        `db:"name"`        // 姓名
		Username   string        `db:"username"`    // 用户名
		Password   string        `db:"password"`    // 密码
		Phone      string        `db:"phone"`       // 手机号
		Sex        string        `db:"sex"`         // 性别
		IdNumber   string        `db:"id_number"`   // 身份证号
		Status     int64         `db:"status"`      // 状态 0:禁用，1:启用
		CreateTime sql.NullTime  `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime  `db:"update_time"` // 更新时间
		CreateUser sql.NullInt64 `db:"create_user"` // 创建人
		UpdateUser sql.NullInt64 `db:"update_user"` // 修改人
	}
)

func newEmployeeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultEmployeeModel {
	return &defaultEmployeeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`employee`",
	}
}

func (m *defaultEmployeeModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	employeeIdKey := fmt.Sprintf("%s%v", cacheEmployeeIdPrefix, id)
	employeeUsernameKey := fmt.Sprintf("%s%v", cacheEmployeeUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, employeeIdKey, employeeUsernameKey)
	return err
}

func (m *defaultEmployeeModel) FindOne(ctx context.Context, id int64) (*Employee, error) {
	employeeIdKey := fmt.Sprintf("%s%v", cacheEmployeeIdPrefix, id)
	var resp Employee
	err := m.QueryRowCtx(ctx, &resp, employeeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", employeeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeModel) FindOneByUsername(ctx context.Context, username string) (*Employee, error) {
	employeeUsernameKey := fmt.Sprintf("%s%v", cacheEmployeeUsernamePrefix, username)
	var resp Employee
	err := m.QueryRowIndexCtx(ctx, &resp, employeeUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", employeeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeModel) Insert(ctx context.Context, data *Employee) (sql.Result, error) {
	employeeIdKey := fmt.Sprintf("%s%v", cacheEmployeeIdPrefix, data.Id)
	employeeUsernameKey := fmt.Sprintf("%s%v", cacheEmployeeUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, employeeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Username, data.Password, data.Phone, data.Sex, data.IdNumber, data.Status, data.CreateUser, data.UpdateUser)
	}, employeeIdKey, employeeUsernameKey)
	return ret, err
}

func (m *defaultEmployeeModel) Update(ctx context.Context, newData *Employee) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	employeeIdKey := fmt.Sprintf("%s%v", cacheEmployeeIdPrefix, data.Id)
	employeeUsernameKey := fmt.Sprintf("%s%v", cacheEmployeeUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, employeeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Username, newData.Password, newData.Phone, newData.Sex, newData.IdNumber, newData.Status, newData.CreateUser, newData.UpdateUser, newData.Id)
	}, employeeIdKey, employeeUsernameKey)
	return err
}

func (m *defaultEmployeeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheEmployeeIdPrefix, primary)
}

func (m *defaultEmployeeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", employeeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultEmployeeModel) tableName() string {
	return m.table
}
