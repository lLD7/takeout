// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shoppingCartFieldNames          = builder.RawFieldNames(&ShoppingCart{})
	shoppingCartRows                = strings.Join(shoppingCartFieldNames, ",")
	shoppingCartRowsExpectAutoSet   = strings.Join(stringx.Remove(shoppingCartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shoppingCartRowsWithPlaceHolder = strings.Join(stringx.Remove(shoppingCartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheShoppingCartIdPrefix = "cache:shoppingCart:id:"
)

type (
	shoppingCartModel interface {
		Insert(ctx context.Context, data *ShoppingCart) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ShoppingCart, error)
		Update(ctx context.Context, data *ShoppingCart) error
		Delete(ctx context.Context, id int64) error
	}

	defaultShoppingCartModel struct {
		sqlc.CachedConn
		table string
	}

	ShoppingCart struct {
		Id         int64          `db:"id"`          // 主键
		Name       sql.NullString `db:"name"`        // 商品名称
		Image      sql.NullString `db:"image"`       // 图片
		UserId     int64          `db:"user_id"`     // 主键
		DishId     sql.NullInt64  `db:"dish_id"`     // 菜品id
		SetmealId  sql.NullInt64  `db:"setmeal_id"`  // 套餐id
		DishFlavor sql.NullString `db:"dish_flavor"` // 口味
		Number     int64          `db:"number"`      // 数量
		Amount     float64        `db:"amount"`      // 金额
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
	}
)

func newShoppingCartModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultShoppingCartModel {
	return &defaultShoppingCartModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`shopping_cart`",
	}
}

func (m *defaultShoppingCartModel) Delete(ctx context.Context, id int64) error {
	shoppingCartIdKey := fmt.Sprintf("%s%v", cacheShoppingCartIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, shoppingCartIdKey)
	return err
}

func (m *defaultShoppingCartModel) FindOne(ctx context.Context, id int64) (*ShoppingCart, error) {
	shoppingCartIdKey := fmt.Sprintf("%s%v", cacheShoppingCartIdPrefix, id)
	var resp ShoppingCart
	err := m.QueryRowCtx(ctx, &resp, shoppingCartIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shoppingCartRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShoppingCartModel) Insert(ctx context.Context, data *ShoppingCart) (sql.Result, error) {
	shoppingCartIdKey := fmt.Sprintf("%s%v", cacheShoppingCartIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, shoppingCartRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Image, data.UserId, data.DishId, data.SetmealId, data.DishFlavor, data.Number, data.Amount)
	}, shoppingCartIdKey)
	return ret, err
}

func (m *defaultShoppingCartModel) Update(ctx context.Context, data *ShoppingCart) error {
	shoppingCartIdKey := fmt.Sprintf("%s%v", cacheShoppingCartIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shoppingCartRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Image, data.UserId, data.DishId, data.SetmealId, data.DishFlavor, data.Number, data.Amount, data.Id)
	}, shoppingCartIdKey)
	return err
}

func (m *defaultShoppingCartModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheShoppingCartIdPrefix, primary)
}

func (m *defaultShoppingCartModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shoppingCartRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultShoppingCartModel) tableName() string {
	return m.table
}
