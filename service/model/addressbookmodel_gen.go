// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	addressBookFieldNames          = builder.RawFieldNames(&AddressBook{})
	addressBookRows                = strings.Join(addressBookFieldNames, ",")
	addressBookRowsExpectAutoSet   = strings.Join(stringx.Remove(addressBookFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	addressBookRowsWithPlaceHolder = strings.Join(stringx.Remove(addressBookFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAddressBookIdPrefix = "cache:addressBook:id:"
)

type (
	addressBookModel interface {
		Insert(ctx context.Context, data *AddressBook) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AddressBook, error)
		Update(ctx context.Context, data *AddressBook) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAddressBookModel struct {
		sqlc.CachedConn
		table string
	}

	AddressBook struct {
		Id           int64          `db:"id"`            // 主键
		UserId       int64          `db:"user_id"`       // 用户id
		Consignee    sql.NullString `db:"consignee"`     // 收货人
		Sex          sql.NullString `db:"sex"`           // 性别
		Phone        string         `db:"phone"`         // 手机号
		ProvinceCode sql.NullString `db:"province_code"` // 省级区划编号
		ProvinceName sql.NullString `db:"province_name"` // 省级名称
		CityCode     sql.NullString `db:"city_code"`     // 市级区划编号
		CityName     sql.NullString `db:"city_name"`     // 市级名称
		DistrictCode sql.NullString `db:"district_code"` // 区级区划编号
		DistrictName sql.NullString `db:"district_name"` // 区级名称
		Detail       sql.NullString `db:"detail"`        // 详细地址
		Label        sql.NullString `db:"label"`         // 标签
		IsDefault    int64          `db:"is_default"`    // 默认 0 否 1是
	}
)

func newAddressBookModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAddressBookModel {
	return &defaultAddressBookModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`address_book`",
	}
}

func (m *defaultAddressBookModel) Delete(ctx context.Context, id int64) error {
	addressBookIdKey := fmt.Sprintf("%s%v", cacheAddressBookIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, addressBookIdKey)
	return err
}

func (m *defaultAddressBookModel) FindOne(ctx context.Context, id int64) (*AddressBook, error) {
	addressBookIdKey := fmt.Sprintf("%s%v", cacheAddressBookIdPrefix, id)
	var resp AddressBook
	err := m.QueryRowCtx(ctx, &resp, addressBookIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressBookRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressBookModel) Insert(ctx context.Context, data *AddressBook) (sql.Result, error) {
	addressBookIdKey := fmt.Sprintf("%s%v", cacheAddressBookIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, addressBookRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Consignee, data.Sex, data.Phone, data.ProvinceCode, data.ProvinceName, data.CityCode, data.CityName, data.DistrictCode, data.DistrictName, data.Detail, data.Label, data.IsDefault)
	}, addressBookIdKey)
	return ret, err
}

func (m *defaultAddressBookModel) Update(ctx context.Context, data *AddressBook) error {
	addressBookIdKey := fmt.Sprintf("%s%v", cacheAddressBookIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, addressBookRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Consignee, data.Sex, data.Phone, data.ProvinceCode, data.ProvinceName, data.CityCode, data.CityName, data.DistrictCode, data.DistrictName, data.Detail, data.Label, data.IsDefault, data.Id)
	}, addressBookIdKey)
	return err
}

func (m *defaultAddressBookModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAddressBookIdPrefix, primary)
}

func (m *defaultAddressBookModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressBookRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAddressBookModel) tableName() string {
	return m.table
}
