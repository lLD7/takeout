// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrdersIdPrefix = "cache:orders:id:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		Id                    int64          `db:"id"`                      // 主键
		Number                sql.NullString `db:"number"`                  // 订单号
		Status                int64          `db:"status"`                  // 订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消 7退款
		UserId                int64          `db:"user_id"`                 // 下单用户
		AddressBookId         int64          `db:"address_book_id"`         // 地址id
		OrderTime             time.Time      `db:"order_time"`              // 下单时间
		CheckoutTime          sql.NullTime   `db:"checkout_time"`           // 结账时间
		PayMethod             int64          `db:"pay_method"`              // 支付方式 1微信,2支付宝
		PayStatus             int64          `db:"pay_status"`              // 支付状态 0未支付 1已支付 2退款
		Amount                float64        `db:"amount"`                  // 实收金额
		Remark                sql.NullString `db:"remark"`                  // 备注
		Phone                 sql.NullString `db:"phone"`                   // 手机号
		Address               sql.NullString `db:"address"`                 // 地址
		UserName              sql.NullString `db:"user_name"`               // 用户名称
		Consignee             sql.NullString `db:"consignee"`               // 收货人
		CancelReason          sql.NullString `db:"cancel_reason"`           // 订单取消原因
		RejectionReason       sql.NullString `db:"rejection_reason"`        // 订单拒绝原因
		CancelTime            sql.NullTime   `db:"cancel_time"`             // 订单取消时间
		EstimatedDeliveryTime sql.NullTime   `db:"estimated_delivery_time"` // 预计送达时间
		DeliveryStatus        int64          `db:"delivery_status"`         // 配送状态  1立即送出  0选择具体时间
		DeliveryTime          sql.NullTime   `db:"delivery_time"`           // 送达时间
		PackAmount            sql.NullInt64  `db:"pack_amount"`             // 打包费
		TablewareNumber       sql.NullInt64  `db:"tableware_number"`        // 餐具数量
		TablewareStatus       int64          `db:"tableware_status"`        // 餐具数量状态  1按餐量提供  0选择具体数量
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id int64) error {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ordersIdKey)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id int64) (*Orders, error) {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, id)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, ordersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Number, data.Status, data.UserId, data.AddressBookId, data.OrderTime, data.CheckoutTime, data.PayMethod, data.PayStatus, data.Amount, data.Remark, data.Phone, data.Address, data.UserName, data.Consignee, data.CancelReason, data.RejectionReason, data.CancelTime, data.EstimatedDeliveryTime, data.DeliveryStatus, data.DeliveryTime, data.PackAmount, data.TablewareNumber, data.TablewareStatus)
	}, ordersIdKey)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, data *Orders) error {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Number, data.Status, data.UserId, data.AddressBookId, data.OrderTime, data.CheckoutTime, data.PayMethod, data.PayStatus, data.Amount, data.Remark, data.Phone, data.Address, data.UserName, data.Consignee, data.CancelReason, data.RejectionReason, data.CancelTime, data.EstimatedDeliveryTime, data.DeliveryStatus, data.DeliveryTime, data.PackAmount, data.TablewareNumber, data.TablewareStatus, data.Id)
	}, ordersIdKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrdersIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
