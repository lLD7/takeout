// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoryFieldNames          = builder.RawFieldNames(&Category{})
	categoryRows                = strings.Join(categoryFieldNames, ",")
	categoryRowsExpectAutoSet   = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	categoryRowsWithPlaceHolder = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCategoryIdPrefix   = "cache:category:id:"
	cacheCategoryNamePrefix = "cache:category:name:"
)

type (
	categoryModel interface {
		Insert(ctx context.Context, data *Category) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Category, error)
		FindOneByName(ctx context.Context, name string) (*Category, error)
		Update(ctx context.Context, data *Category) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	Category struct {
		Id         int64         `db:"id"`          // 主键
		Type       sql.NullInt64 `db:"type"`        // 类型   1 菜品分类 2 套餐分类
		Name       string        `db:"name"`        // 分类名称
		Sort       int64         `db:"sort"`        // 顺序
		Status     sql.NullInt64 `db:"status"`      // 分类状态 0:禁用，1:启用
		CreateTime sql.NullTime  `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime  `db:"update_time"` // 更新时间
		CreateUser sql.NullInt64 `db:"create_user"` // 创建人
		UpdateUser sql.NullInt64 `db:"update_user"` // 修改人
	}
)

func newCategoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCategoryModel {
	return &defaultCategoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`category`",
	}
}

func (m *defaultCategoryModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	categoryIdKey := fmt.Sprintf("%s%v", cacheCategoryIdPrefix, id)
	categoryNameKey := fmt.Sprintf("%s%v", cacheCategoryNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, categoryIdKey, categoryNameKey)
	return err
}

func (m *defaultCategoryModel) FindOne(ctx context.Context, id int64) (*Category, error) {
	categoryIdKey := fmt.Sprintf("%s%v", cacheCategoryIdPrefix, id)
	var resp Category
	err := m.QueryRowCtx(ctx, &resp, categoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) FindOneByName(ctx context.Context, name string) (*Category, error) {
	categoryNameKey := fmt.Sprintf("%s%v", cacheCategoryNamePrefix, name)
	var resp Category
	err := m.QueryRowIndexCtx(ctx, &resp, categoryNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", categoryRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) Insert(ctx context.Context, data *Category) (sql.Result, error) {
	categoryIdKey := fmt.Sprintf("%s%v", cacheCategoryIdPrefix, data.Id)
	categoryNameKey := fmt.Sprintf("%s%v", cacheCategoryNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, categoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Type, data.Name, data.Sort, data.Status, data.CreateUser, data.UpdateUser)
	}, categoryIdKey, categoryNameKey)
	return ret, err
}

func (m *defaultCategoryModel) Update(ctx context.Context, newData *Category) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	categoryIdKey := fmt.Sprintf("%s%v", cacheCategoryIdPrefix, data.Id)
	categoryNameKey := fmt.Sprintf("%s%v", cacheCategoryNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, categoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Type, newData.Name, newData.Sort, newData.Status, newData.CreateUser, newData.UpdateUser, newData.Id)
	}, categoryIdKey, categoryNameKey)
	return err
}

func (m *defaultCategoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCategoryIdPrefix, primary)
}

func (m *defaultCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCategoryModel) tableName() string {
	return m.table
}
